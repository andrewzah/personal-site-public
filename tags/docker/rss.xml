<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>AZ</title>
        <link>andrewzah.com</link>
        <description>Sometimes relevant thoughts by Andrew</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="andrewzah.com/tags/docker/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sun, 02 Jun 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Automatically deploy your blog via Git with Caddy and Docker</title>
                <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
                <link>andrewzah.com/posts/automatically-deploy-your-blog-via-git-caddy-docker/</link>
                <guid>andrewzah.com/posts/automatically-deploy-your-blog-via-git-caddy-docker/</guid>
                <description>&lt;p&gt;Over the years, I&#x27;ve slowly and incrementally optimized my blog. Originally I used an entire rails setup with postgres, because that was the first thing I really learned how to program. Yet that&#x27;s quite the overkill for a static blog... I don&#x27;t even include comments anymore.&lt;&#x2f;p&gt;
&lt;p&gt;This is where &lt;a href=&quot;https:&#x2f;&#x2f;getzola.org&quot;&gt;Zola&lt;&#x2f;a&gt; comes in, previously named &lt;em&gt;Gutenberg&lt;&#x2f;em&gt;. It&#x27;s a static site generator written in Rust that uses &lt;a href=&quot;https:&#x2f;&#x2f;tera.netlify.com&#x2f;&quot;&gt;Tera&lt;&#x2f;a&gt; for templating. It serves as a counterpart to &lt;a href=&quot;https:&#x2f;&#x2f;gohugo.io&#x2f;&quot;&gt;Hugo&lt;&#x2f;a&gt;, written in Golang. Both have a similar featureset, so I chose Zola since I know Rust and can contribute if needed.&lt;&#x2f;p&gt;
&lt;p&gt;However basically &lt;a href=&quot;https:&#x2f;&#x2f;git.sr.ht&#x2f;%7Echarles&#x2f;cdaniels.net&#x2f;tree&#x2f;master&#x2f;bin&#x2f;buildit&quot;&gt;any static site generation system&lt;&#x2f;a&gt; can work, so long as you end up with files generated to your liking.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;zola&quot;&gt;Zola&lt;&#x2f;h2&gt;
&lt;p&gt;Feel free to skip this section if you already have your own static site generation system.&lt;&#x2f;p&gt;
&lt;p&gt;&lt;strong&gt;One caveat&lt;&#x2f;strong&gt;: Zola minifies sass by default but not javascript. I use a &lt;a href=&quot;https:&#x2f;&#x2f;git.sr.ht&#x2f;%7Eandrewzah&#x2f;personal-site&#x2f;tree&#x2f;master&#x2f;Makefile&quot;&gt;Makefile&lt;&#x2f;a&gt; to minify the js files and bundle them.&lt;&#x2f;p&gt;
&lt;h4 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2f;h4&gt;
&lt;p&gt;Zola has a &lt;a href=&quot;https:&#x2f;&#x2f;www.getzola.org&#x2f;documentation&#x2f;getting-started&#x2f;installation&#x2f;&quot;&gt;getting started&lt;&#x2f;a&gt; guide. For inspiration, you can look at the &lt;a href=&quot;https:&#x2f;&#x2f;git.sr.ht&#x2f;%7Eandrewzah&#x2f;personal-site&#x2f;tree&quot;&gt;source code for this very blog&lt;&#x2f;a&gt; or &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;getzola&#x2f;zola&#x2f;blob&#x2f;master&#x2f;EXAMPLES.md&quot;&gt;different sites using Zola&lt;&#x2f;a&gt;.&lt;a id=&quot;footnote-cite-0&quot; href=&quot;#footnote-0&quot;&gt;(0)&lt;&#x2f;a&gt;&lt;&#x2f;p&gt;
&lt;h4 id=&quot;my-setup&quot;&gt;My setup&lt;&#x2f;h4&gt;
&lt;p&gt;This is what my site&#x27;s directory looks like:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#323232;&quot;&gt;.
├── binary-data&#x2f;
├── Caddyfile
├── config.toml
├── content&#x2f;
├── docker-compose.yml
├── Dockerfile
├── LICENSE
├── Makefile
├── public&#x2f;
├── sass&#x2f;
├── static&#x2f;
├── syntaxes&#x2f;
├── templates&#x2f;
└── themes&#x2f;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;&lt;code&gt;binary-data&lt;&#x2f;code&gt; is where I store all the screenshots, pdfs, and other binary data I refer to my posts. For the actual posts I upload these to an amazon S3 bucket, but I keep these as a backup, &lt;em&gt;outside&lt;&#x2f;em&gt; of git.&lt;a id=&quot;footnote-cite-1&quot; href=&quot;#footnote-1&quot;&gt;(1)&lt;&#x2f;a&gt;&lt;&#x2f;p&gt;
&lt;p&gt;&lt;code&gt;sass&#x2f;&lt;&#x2f;code&gt; and &lt;code&gt;static&#x2f;&lt;&#x2f;code&gt; are pretty easy: the former gets compiled to css, the latter gets copied directly to the &lt;code&gt;public&#x2f;&lt;&#x2f;code&gt; directory during generation.&lt;&#x2f;p&gt;
&lt;p&gt;For code, &lt;code&gt;themes&lt;&#x2f;code&gt; contains the syntax highlighting theme, and &lt;code&gt;syntaxes&lt;&#x2f;code&gt; contains sublime syntax files I added because Zola doesn&#x27;t support &lt;a href=&quot;http:&#x2f;&#x2f;slim-lang.com&#x2f;&quot;&gt;slim&lt;&#x2f;a&gt; syntax highlighting yet.&lt;&#x2f;p&gt;
&lt;p&gt;This leaves us &lt;code&gt;content&lt;&#x2f;code&gt;, the actual posts and pages, and &lt;code&gt;templates&lt;&#x2f;code&gt;, for how to render them. &lt;code&gt;templates&lt;&#x2f;code&gt; also contains &lt;code&gt;shortcodes&#x2f;&lt;&#x2f;code&gt;, which function much like wordpress&#x27; shortcodes.&lt;&#x2f;p&gt;
&lt;h4 id=&quot;templating&quot;&gt;Templating&lt;&#x2f;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2f;&#x2f;git.sr.ht&#x2f;%7Eandrewzah&#x2f;personal-site&#x2f;tree&#x2f;master&#x2f;templates&quot;&gt;These&lt;&#x2f;a&gt; are all the templates I&#x27;ve made. Naturally it can get as complex as you want. I generally have one per page or page type, such as &#x2f;projects or &#x2f;posts.&lt;&#x2f;p&gt;
&lt;p&gt;At a minimum, you probably want a &lt;a href=&quot;https:&#x2f;&#x2f;git.sr.ht&#x2f;%7Eandrewzah&#x2f;personal-site&#x2f;tree&#x2f;master&#x2f;templates&#x2f;base.html&quot;&gt;base.html&lt;&#x2f;a&gt; to deal with the oh-so-fun SEO stuff, and a &lt;code&gt;macros.html&lt;&#x2f;code&gt; for &amp;quot;dynamically&amp;quot; rendering things. I use it for the navigation bar, footnotes, references, citations, and rendering links.&lt;&#x2f;p&gt;
&lt;p&gt;With child templates, you can use blocks to inject content back to the parent:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&amp;lt;!-- base.html --&amp;gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;head&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
  &lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&amp;lt;!-- constants in base.html header --&amp;gt;
  &lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;meta &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;charset&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;

  &lt;&#x2f;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&amp;lt;!-- set from child --&amp;gt;
  &lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;title&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;{% block title %}{% endblock title %}&amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;title&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
  {% block head %}{% endblock head %}
&amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;head&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;then in the child you define the block:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&amp;lt;!-- zola provides objects like page&#x2f;section&#x2f;config, see the docs --&amp;gt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;
{% block title %}{{ page.title }} | {{ config.title }}{% endblock title %}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Thrilling stuff.&lt;&#x2f;p&gt;
&lt;p&gt;If you look at my source it can appear a tad complex now, but I just slowly added things as they came up– like the page title, then custom SEO attributes, etc.&lt;&#x2f;p&gt;
&lt;h4 id=&quot;macros&quot;&gt;Macros&lt;&#x2f;h4&gt;
&lt;p&gt;Tera&#x27;s macro system is really useful. One of my use cases was to show the tags and categories below a post:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#323232;&quot;&gt;{% macro render_tags(tags) %}
  &amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;div &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;class&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;tags&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
    Tags: 
    {% for tag in tags %}
      {% if loop.last %}
        &amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;href&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&#x2f;tags&#x2f;{{ tag | slugify }}&#x2f;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;{{ tag | title }}&amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
      {% else %}
        &amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;href&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&#x2f;tags&#x2f;{{ tag | slugify }}&#x2f;&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;{{ tag | title }}&amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt; | 
      {% endif %}
    {% endfor %}
  &amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;div&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
{% endmacro render_tags %}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Yes, I should probably clean them up a bit. They work good enough for now.&lt;&#x2f;p&gt;
&lt;h4 id=&quot;shortcodes&quot;&gt;Shortcodes&lt;&#x2f;h4&gt;
&lt;p&gt;Shortcodes are awesome. Two main things I use them for:&lt;&#x2f;p&gt;
&lt;ul&gt;
&lt;li&gt;footnotes, citations, references&lt;&#x2f;li&gt;
&lt;li&gt;generating boilerplate for lity.js (a lightbox lib)&lt;&#x2f;li&gt;
&lt;&#x2f;ul&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&amp;lt;!-- img.html --&amp;gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;href&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{{url}}&amp;quot; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;data-lity data-lity-desc&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{{desc}}&amp;quot; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;alt&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{{desc}}&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
  &amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;img &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;class&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;full&amp;quot; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;async-src&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{{url}}&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&#x2f;&amp;gt;
&amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
{% if t %}
  &amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;p &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;class&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;image-desc&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt; {{t}} &amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;p&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
{% endif %}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&amp;lt;!-- fn.html --&amp;gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;id&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;footnote-cite-{{num}}&amp;quot; &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;href&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;#footnote-{{num}}&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;({{num}})&amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;a&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;My &lt;a href=&quot;..&#x2f;korean-for-programmers&#x2f;#finally-a-sentence&quot;&gt;Korean for Programmers&lt;&#x2f;a&gt; post uses ~5 shortcodes to &lt;span class=&quot;hl hl-red&quot;&gt;
highlight
&lt;&#x2f;span&gt; words in different colors:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&amp;lt;!-- hlm.html --&amp;gt;
&amp;lt;!-- where t=text,c=css color class name--&amp;gt;
&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;lt;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;span &lt;&#x2f;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;class&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;=&lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hl hl-middle hl-{{c}}&amp;quot;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
  {{t}}
&amp;lt;&#x2f;&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;span&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;&amp;gt;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;Okay, okay.. Time for the real stuff.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;static-assets-repo&quot;&gt;Static Assets Repo&lt;&#x2f;h2&gt;
&lt;p&gt;Now that you have your static files, commit them to a new git repo. With Zola, I use &lt;code&gt;rsync&lt;&#x2f;code&gt; to move the output from &lt;code&gt;public&#x2f;&lt;&#x2f;code&gt; to another directory–since &lt;code&gt;zola build&lt;&#x2f;code&gt; nukes it each time.&lt;&#x2f;p&gt;
&lt;p&gt;As stated earlier I keep binary files like images in a separate directory, and in the posts themselves I link to amazon s3. If you want to link to assets locally, you might need something like &lt;a href=&quot;https:&#x2f;&#x2f;git-lfs.github.com&#x2f;&quot;&gt;Git LFS&lt;&#x2f;a&gt; from Github or or a different solution.&lt;&#x2f;p&gt;
&lt;p&gt;I keep my statically generated assets at &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;azah&#x2f;personal-site-public&quot;&gt;github.com&#x2f;azah&#x2f;personal-site-public&lt;&#x2f;a&gt; because sourcehut doesn&#x27;t support webhooks yet.&lt;&#x2f;p&gt;
&lt;h2 id=&quot;caddy&quot;&gt;Caddy&lt;&#x2f;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2f;&#x2f;caddyserver.com&#x2f;&quot;&gt;Caddy&lt;&#x2f;a&gt; is an awesome HTTP&#x2f;2 web server. It handles SSL certs for you automatically via Lets Encrypt, and it has a &lt;code&gt;git&lt;&#x2f;code&gt; plugin which we&#x27;ll be using. The git plugin clones or updates a repo for us, so we can now push content to a git repo and have it automatically update!&lt;&#x2f;p&gt;
&lt;p&gt;Let&#x27;s create the Caddyfile:&lt;&#x2f;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;&#x2f;strong&gt;!! Use a port (like :2015) for local testing instead of the actual domain! If you run Caddy with this caddyfile locally without the &lt;code&gt;-disable-acme-auth&lt;&#x2f;code&gt;, caddy will repeatedly try to authorize, quickly &lt;strong&gt;ratelimiting you from Let&#x27;s Encrypt&lt;&#x2f;strong&gt;!&lt;a id=&quot;footnote-cite-2&quot; href=&quot;#footnote-2&quot;&gt;(2)&lt;&#x2f;a&gt;&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#323232;&quot;&gt;# Caddyfile
yoursite.com, www.yoursite.com {
  gzip
  cache {
    default_max_age 10m
  }

  git {
    hook &#x2f;webhook {%SITE_WEBHOOK%}
    repo https:&#x2f;&#x2f;github.com&#x2f;azah&#x2f;personal-site-public.git
    branch master
    clone_args --recurse-submodules
    pull_args --recurse-submodules
    interval 86400
    hook_type github
  }

  root &#x2f;www&#x2f;public
}
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;The &lt;code&gt;SITE_WEBHOOK&lt;&#x2f;code&gt; environment variable is set in &lt;code&gt;.env&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;Note that a webhook is optional. In fact, &lt;a href=&quot;https:&#x2f;&#x2f;caddyserver.com&#x2f;docs&#x2f;http.git&quot;&gt;all of the git directives here are optional&lt;&#x2f;a&gt; besides the repo path itself. By default the plugin clones to the root path, &lt;code&gt;&#x2f;www&#x2f;public&lt;&#x2f;code&gt; in this case.&lt;&#x2f;p&gt;
&lt;p&gt;I&#x27;ve set it to pull once per day as well as listen for requests on &lt;code&gt;&#x2f;webhook&lt;&#x2f;code&gt;. Right now I use github webhooks as &lt;code&gt;sourcehut&lt;&#x2f;code&gt; doesn&#x27;t seem to support webhooks yet.&lt;&#x2f;p&gt;
&lt;p&gt;If you&#x27;re running multiple containerized services you can use caddy as a proxy as well. You can see the &lt;a href=&quot;https:&#x2f;&#x2f;git.sr.ht&#x2f;%7Eandrewzah&#x2f;andrewzah.com&#x2f;tree&quot;&gt;source for andrewzah.com&#x27;s docker script&lt;&#x2f;a&gt; as an example. I have an &lt;code&gt;http&lt;&#x2f;code&gt; docker service that proxies to my &lt;code&gt;website&lt;&#x2f;code&gt; service, which looks like the following:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#323232;&quot;&gt;# services&#x2f;http&#x2f;Caddyfile
www.andrewzah.com, andrewzah.com, andrei.blue {
  gzip
  tls zah@andrewzah.com

  log &#x2f; stdout {combined}
  errors stderr

  proxy &#x2f;webhook http:&#x2f;&#x2f;website:1111&#x2f;webhook {
    transparent
  }

  proxy &#x2f; http:&#x2f;&#x2f;website:1111
}

...
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;&#x2f;h2&gt;
&lt;p&gt;Lastly, we&#x27;ll run all of this inside a docker container, so we need a &lt;code&gt;Dockerfile&lt;&#x2f;code&gt;:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#323232;&quot;&gt;FROM alpine:edge
LABEL caddy_version = &amp;quot;1.0.0&amp;quot; architecture=&amp;quot;amd64&amp;quot;

# Caddy
RUN adduser -S caddy

ARG plugins=http.git,http.cache
ARG version=v1.0.0

RUN apk add --no-cache --virtual .build-caddy openssh-client tar curl \
  &amp;amp;&amp;amp; apk add --no-cache git \
  &amp;amp;&amp;amp; curl --silent --show-error --fail --location \
  --header &amp;quot;Accept: application&#x2f;tar+gzip, application&#x2f;x-zip, application&#x2f;octet-stream&amp;quot; -p \
  &amp;quot;https:&#x2f;&#x2f;caddyserver.com&#x2f;download&#x2f;linux&#x2f;amd64?version=${version}&amp;amp;plugins=${plugins}&amp;amp;license=personal&amp;amp;telemetry=off&amp;quot; \
  | tar --no-same-owner -C &#x2f;usr&#x2f;bin -xz caddy \
  &amp;amp;&amp;amp; chmod 0755 &#x2f;usr&#x2f;bin&#x2f;caddy \
  &amp;amp;&amp;amp; apk del --purge .build-caddy

RUN &#x2f;usr&#x2f;bin&#x2f;caddy --plugins
RUN mkdir &#x2f;www \
  &amp;amp;&amp;amp; chown -R caddy &#x2f;www

COPY Caddyfile &#x2f;etc&#x2f;Caddyfile

USER caddy
ENTRYPOINT [&amp;quot;&#x2f;usr&#x2f;bin&#x2f;caddy&amp;quot;]
CMD [&amp;quot;--conf&amp;quot;, &amp;quot;&#x2f;etc&#x2f;Caddyfile&amp;quot;, &amp;quot;--log&amp;quot;, &amp;quot;stdout&amp;quot;, &amp;quot;-agree&amp;quot;]
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;and a corresponding &lt;code&gt;docker-compose&lt;&#x2f;code&gt; file:&lt;&#x2f;p&gt;
&lt;pre style=&quot;background-color:#ffffff;&quot;&gt;
&lt;span style=&quot;color:#63a35c;&quot;&gt;version&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;3.7&amp;#39;

&lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;services&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;:
  &lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;web&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;:
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;restart&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;always
    build&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;:
      &lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;context&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;.
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;image&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;: &lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;&amp;lt;your_dockerhub_username&amp;gt;&#x2f;personal-site
    ports&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;:
      - &lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;1111&amp;quot;
    &lt;&#x2f;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;env_file&lt;&#x2f;span&gt;&lt;span style=&quot;color:#323232;&quot;&gt;:
      - &lt;&#x2f;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.env&amp;quot;
&lt;&#x2f;span&gt;&lt;&#x2f;pre&gt;
&lt;p&gt;I try to use alpine docker whenever possible. This image fetches a predefined Caddy version, v1.0.0, with the &lt;code&gt;cache&lt;&#x2f;code&gt; and &lt;code&gt;git&lt;&#x2f;code&gt; plugins.&lt;&#x2f;p&gt;
&lt;p&gt;We need to pass the &lt;code&gt;-agree&lt;&#x2f;code&gt; flag to agree to Let&#x27;s Encrypt&#x27;s Subscriber Agreement. Caddy will not run otherwise unless you use &lt;code&gt;-disable-http-challenge&lt;&#x2f;code&gt; (or specify http&#x2f;a port), but we want HTTPS, no?&lt;&#x2f;p&gt;
&lt;p&gt;Deploying the image is just &lt;code&gt;docker push&lt;&#x2f;code&gt; once you&#x27;ve signed in via the docker cli. &lt;&#x2f;p&gt;
&lt;hr &#x2f;&gt;
&lt;p&gt;...and that&#x27;s pretty much it. For your VPS, you&#x27;ll want to install docker and&#x2f;or docker-compose, then run the image. If you set up a corresponding docker-compose file, you can do &lt;code&gt;docker-compose pull &amp;amp;&amp;amp; docker-compose up -d&lt;&#x2f;code&gt;.&lt;&#x2f;p&gt;
&lt;p&gt;If you&#x27;re using webhooks, don&#x27;t forget to configure the webhook on github&#x2f;gitlab&#x2f;bitbucket&#x2f;etc.&lt;&#x2f;p&gt;
&lt;p&gt;If configured correctly, you should now be able to git push your static assets and automatically have the container pull them in!&lt;&#x2f;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2f;h2&gt;
</description>
            </item>
        
            <item>
                <title>Selfhosting git with Gitea, Docker, Caddy</title>
                <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
                <link>andrewzah.com/posts/selfhosting-git-with-gitea-docker-caddy/</link>
                <guid>andrewzah.com/posts/selfhosting-git-with-gitea-docker-caddy/</guid>
                <description>&lt;p&gt;Something I&#x27;ve been doing recently is starting to self-host as much as I can. I don&#x27;t like relying on businesses, since they can change their services on a whim. I host an &lt;a href=&quot;https:&#x2f;&#x2f;en.wikipedia.org&#x2f;wiki&#x2f;ZNC&quot;&gt;IRC network bouncer&lt;&#x2f;a&gt;, a &lt;a href=&quot;https:&#x2f;&#x2f;github.com&#x2f;miniflux&#x2f;miniflux&quot;&gt;feed reader&lt;&#x2f;a&gt;, and so on. But why not a git frontend?&lt;&#x2f;p&gt;
</description>
            </item>
        
            <item>
                <title>A new year, a new site</title>
                <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
                <link>andrewzah.com/posts/a-new-year-a-new-site/</link>
                <guid>andrewzah.com/posts/a-new-year-a-new-site/</guid>
                <description>&lt;p&gt;I&#x27;ve migrated my website. Again.&lt;&#x2f;p&gt;
</description>
            </item>
        
    </channel>
</rss>
